import 'package:auto_route/auto_route.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_tdd/core/bloc/value_state_manager/value_state_manager_import.dart';
import 'package:flutter_tdd/core/constants/dimens.dart';
import 'package:flutter_tdd/core/constants/gaps.dart';
import 'package:flutter_tdd/core/helpers/validator.dart';
import 'package:flutter_tdd/core/localization/translate.dart';
import 'package:flutter_tdd/core/theme/colors/colors_extension.dart';
import 'package:flutter_tdd/core/theme/text/app_text_style.dart';
import 'package:flutter_tdd/core/widgets/GenericTextField.dart';
import 'package:flutter_tdd/core/widgets/LoadingButton.dart';
import 'package:flutter_tdd/features/auth/domain/entity/signup_info_entity.dart';
import 'package:flutter_tdd/features/auth/presentation/pages/complete_signup/complete_signup_imports.dart';
import 'package:flutter_tdd/features/auth/presentation/pages/complete_signup/widgets/complete_signup_widgets_imports.dart';

class InfoBottomSheet extends StatefulWidget {
  final SignupInfoEntity infoEntity;
  final CompleteSignUpController controller;
  final Function()? onSubmit;
  final Function()? onVerify;

  const InfoBottomSheet({
    super.key,
    required this.infoEntity,
    required this.controller,
    this.onSubmit,
    this.onVerify,
  });

  @override
  State<InfoBottomSheet> createState() => _InfoBottomSheetState();
}

class _InfoBottomSheetState extends State<InfoBottomSheet> {
  @override
  void initState() {
    if (widget.infoEntity.subTitle != Translate.s.add_username) {
      if (widget.infoEntity.title == Translate.s.mobil) {
        widget.controller.textEditingController.text = widget
                .infoEntity.subTitle
                ?.replaceAll("${widget.controller.countryCode}", "") ??
            '';
      } else {
        if (widget.infoEntity.subTitle == 'null') {
          widget.controller.textEditingController.text = "";
        } else {
          widget.controller.textEditingController.text =
              widget.infoEntity.subTitle ?? "";
        }
        widget.controller.textEditingController2.text =
            widget.infoEntity.secondValue ?? "";
      }
    }
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: Dimens.paddingTop10PX,
      // margin: const EdgeInsets.only(top: kTextTabBarHeight + 20),
      decoration: BoxDecoration(
        color: context.colors.background1,
        borderRadius: const BorderRadius.vertical(top: Radius.circular(12)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: Dimens.paddingH15V24PX,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                GestureDetector(
                  onTap: () {
                    widget.controller.textEditingController.clear();
                    widget.controller.textEditingController2.clear();
                    AutoRouter.of(context).pop();
                  },
                  child: Text(
                    Translate.s.cancel,
                    style: AppTextStyle.s15_w600(
                      color: context.colors.appColorBlue,
                    ),
                  ),
                ),
                Expanded(
                  child: Visibility(
                    visible:
                        widget.infoEntity.title != Translate.s.vat_registered,
                    replacement: Text(
                      Translate.s.vatNumber,
                      style: AppTextStyle.s15_w600(color: context.colors.black),
                      textAlign: TextAlign.center,
                    ),
                    child: Text(
                      widget.infoEntity.title,
                      style: AppTextStyle.s15_w600(color: context.colors.black),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
                Flexible(
                  flex: 1,
                  child: _visibleInput() &&
                          widget.infoEntity.title != Translate.s.mobil
                      ? ObsValueConsumer(
                          observable: widget.controller.loadingObs,
                          builder: (context, value) {
                            return Visibility(
                              visible: !value,
                              replacement: CircularProgressIndicator.adaptive(
                                backgroundColor: context.colors.appColorBlue,
                              ),
                              child: GestureDetector(
                                onTap: () => widget.onSubmit!(),
                                child: Text(
                                  Translate.s.save,
                                  style: AppTextStyle.s15_w600(
                                    color: context.colors.appColorBlue,
                                  ),
                                  textAlign: TextAlign.end,
                                ),
                              ),
                            );
                          })
                      : Gaps.hGap32,
                ),
              ],
            ),
          ),
          if (widget.infoEntity.title == Translate.s.label_email)
            Padding(
              padding: const EdgeInsets.only(top: 10, right: 20, left: 20),
              child: Text(
                widget.infoEntity.title,
                style: AppTextStyle.s15_w600(color: context.colors.textColor),
                textAlign: TextAlign.start,
              ),
            ),
          Visibility(
            visible: _visibleInput(),
            child: GenericTextField(
              controller: widget.controller.textEditingController,
              fieldTypes: FieldTypes.normal,
              fillColor: context.colors.white,
              action: TextInputAction.next,
              hint: widget.infoEntity.title == Translate.s.your_name
                  ? Translate.s.first_name
                  : widget.infoEntity.title,
              type: TextInputType.text,
              margin: Dimens.paddingH16V10PX,
              validate: (value) => value?.noValidate(),
              contentPadding: Dimens.paddingAll16PX,
              prefixIcon: widget.infoEntity.title == Translate.s.mobil
                  ? _prefixIcon(context)
                  : null,
              focusBorderColor: Colors.transparent,
              enableBorderColor: Colors.transparent,
              hintTextStyle: AppTextStyle.s16_w400(color: context.colors.grey),
              inputStyle: AppTextStyle.s16_w400(color: context.colors.black)
                  .copyWith(height: 1.3),
              cursorColor: context.colors.appColorBlue,
            ),
          ),
          Visibility(
            visible: widget.infoEntity.title == Translate.s.your_name,
            child: GenericTextField(
              controller: widget.controller.textEditingController2,
              fieldTypes: FieldTypes.normal,
              fillColor: context.colors.white,
              action: TextInputAction.next,
              hint: Translate.s.last_name,
              type: TextInputType.text,
              margin: Dimens.paddingH16V10PX,
              validate: (value) => value?.noValidate(),
              contentPadding: Dimens.paddingAll16PX,
              focusBorderColor: Colors.transparent,
              enableBorderColor: Colors.transparent,
              hintTextStyle: AppTextStyle.s16_w400(color: context.colors.grey),
              inputStyle: AppTextStyle.s16_w400(color: context.colors.black)
                  .copyWith(height: 1.3),
              cursorColor: context.colors.appColorBlue,
            ),
          ),
          Visibility(
            visible: widget.infoEntity.title ==
                Translate.s.commercial_register_number,
            child: CRNumberWidget(
                controller: widget.controller, infoEntity: widget.infoEntity),
          ),
          Visibility(
            visible: widget.infoEntity.title == Translate.s.vat_registered,
            child: VatNumberWidget(
                controller: widget.controller,
                infoEntity: widget.infoEntity,
                onSubmit: widget.onSubmit),
          ),
          if (widget.infoEntity.title == Translate.s.label_email)
            Padding(
              padding: Dimens.paddingAll15PX,
              child: Column(
                children: [
                  ObsValueConsumer(
                    observable: widget.controller.loadingObs,
                    builder: (context, value) => LoadingButton(
                      title: Translate.s.send_verify_email,
                      onTap: () => widget.controller
                          .onVerifyEmail(context, widget.infoEntity),
                      color: context.colors.appColorBlue,
                      textColor: context.colors.white,
                      btnKey: widget.controller.emailVerifyBtnKey,
                      borderRadius: 30,
                      height: 43,
                      titleTextStyle:
                          AppTextStyle.s16_w600(color: context.colors.white),
                      child: value ? const CupertinoActivityIndicator() : null,
                    ),
                  ),
                  Gaps.vGap5,
                  Text(
                    Translate.s.verify_email_text,
                    textAlign: TextAlign.center,
                    style:
                        AppTextStyle.s15_w400(color: context.colors.textColor)
                            .copyWith(
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),
          if (widget.infoEntity.title == Translate.s.mobil)
            Padding(
              padding: Dimens.paddingAll15PX,
              child: Column(
                children: [
                  ObsValueConsumer(
                    observable: widget.controller.loadingObs,
                    builder: (context, value) => LoadingButton(
                      title: Translate.s.send_verify_code,
                      onTap: () => widget.controller
                          .sendOtpPhone(context, widget.infoEntity),
                      color: context.colors.appColorBlue,
                      textColor: context.colors.white,
                      btnKey: widget.controller.phoneVerifyBtnKey,
                      borderRadius: 30,
                      height: 43,
                      titleTextStyle:
                          AppTextStyle.s16_w600(color: context.colors.white),
                      child: value ? const CupertinoActivityIndicator() : null,
                    ),
                  ),
                  Gaps.vGap5,
                  Text(
                    Translate.s.verify_phone_text,
                    textAlign: TextAlign.center,
                    style:
                        AppTextStyle.s15_w400(color: context.colors.textColor)
                            .copyWith(
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  bool _visibleInput() =>
      widget.infoEntity.title != Translate.s.commercial_register_number &&
      widget.infoEntity.title != Translate.s.vat_registered;

  Widget _prefixIcon(BuildContext context) {
    return GestureDetector(
      onTap: () => widget.controller.showCountryBottomSheet(context),
      child: Padding(
        padding: const EdgeInsetsDirectional.fromSTEB(16, 10, 10, 18),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            ObsValueConsumer(
              observable: widget.controller.countryCodeObs,
              builder: (context, value) {
                return Row(
                  children: [
                    Text(
                      value.flag,
                      style: AppTextStyle.s24_w500(
                          color: context.colors.textColor),
                    ),
                    Gaps.hGap5,
                    Icon(
                      Icons.keyboard_arrow_down_outlined,
                      size: 17,
                      color: context.colors.black,
                    ),
                    Gaps.hGap5,
                    Container(
                        width: 1,
                        height: 20,
                        color: context.colors.grey.withValues(alpha: .5)),
                    Gaps.hGap10,
                    Directionality(
                      textDirection: TextDirection.ltr,
                      child: Text(
                        value.dialCode,
                        style: AppTextStyle.s16_w400(
                            color: context.colors.textColor),
                      ),
                    ),
                    Gaps.hGap10,
                  ],
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
